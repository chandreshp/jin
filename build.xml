<project name="Jin" default="build">

	<path id="compile.class.path">
		<fileset dir="resources/libs">
			<include name="*.jar"/>
		</fileset>
	</path>


	<!-- Initializes stuff -->
	<target name="init">
		<property name="build.dir" value="build" />
		
		<property name="source.dir" value="src" />
		<property name="classes.dir" value="classes" /> 
		<property name="res.dir" value="resources" /> 
		<property name="libs.dir" value="${build.dir}/libs" />	
		<property name="servers.dir" value="${build.dir}/servers" />	
		<property name="plugins.dir" value="${build.dir}/plugins" />
		<property name="resources.dir" value="${build.dir}/resources" />	
		<property name="lnfs.dir" value="${build.dir}/lnfs" />	
		<property name="debug" value="yes" />
	</target>



	<!-- Removes things done by build -->

	<target name="clean" depends="init">
		<delete dir="${classes.dir}" />
		<delete dir="${build.dir}" />
	</target>



	<!-- This is just to compile everything, without jarring
			 or placing things at appropriate locations -->
	<target name="compile" depends="init">
		<mkdir dir="${classes.dir}" />
		<echo message="COMPILER: ${build.compiler}" />
		<javac srcdir="${source.dir}"
		       destdir="${classes.dir}"
		       includes="**"
		       classpathref="compile.class.path"
		       debug="${debug}">

			<!-- <compilerarg compiler="jikes" value="+Pnaming-convention" /> -->
			<compilerarg compiler="jikes" value="+Punused-type-imports" />
			<compilerarg compiler="jikes" value="+Punused-package-imports" />
			<compilerarg compiler="jikes" value="+Pno-shadow" />
		</javac>


		<!-- Piece sets -->		
		<mkdir dir="${classes.dir}/pieces" />
		
		<javac srcdir="${res.dir}/pieces"
		       destdir="${classes.dir}/pieces"
	               includes="*.java"
		       classpath="${classes.dir}"
		       debug="${debug}"
		/>

		<antcall target="compilePieceSet">
			<param name="piece-set-id" value="blitzin"/>
		</antcall>
		
		<antcall target="compilePieceSet">
			<param name="piece-set-id" value="eboard"/>
		</antcall>
		
		<!-- Boards -->
		<mkdir dir="${classes.dir}/boards" />
		
		<javac srcdir="${res.dir}/boards"
		       destdir="${classes.dir}/boards"
		       includes="*.java"
		       classpath="${classes.dir}"
		       debug="${debug}"
		/>
		
	</target>
	
	<!-- Compiles a single piece set -->
	<target name="compilePieceSet">
		<mkdir dir="${classes.dir}/pieces/${piece-set-id}" />
		<javac srcdir="${res.dir}/pieces/${piece-set-id}"
		       destdir="${classes.dir}/pieces/${piece-set-id}"
		       includes="**"
		       classpath="${classes.dir}"
		       debug="${debug}"
		/>
	</target>

	<!-- After compiling, this jars everything properly
			 and puts it where it belongs. -->
	<target name="build" depends="init, compile">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${libs.dir}" />
		<mkdir dir="${servers.dir}" />
		<mkdir dir="${plugins.dir}" />
		<mkdir dir="${plugins.dir}/fics" />
		<mkdir dir="${plugins.dir}/icc" />
		<mkdir dir="${lnfs.dir}" />
		
		<!-- Copy libs -->
		<copy todir="${libs.dir}">
			<fileset dir="resources/libs" />
		</copy>
		
		<!-- Copy Look and Feels -->
		<copy todir="${lnfs.dir}">
			<fileset dir="resources/lnfs" />
		</copy>

		<!-- Check whether Unix (but not Mac OS X) -->		
		<condition property="unix">
			<and>
				<os family="unix"/>
				<not>
					<os family="mac"/>
				</not>
			</and>
		</condition>

		<!-- Check whether Windows -->
		<condition property="windows">
			<os family="windows" />
		</condition>
		
		<!-- Check whether Mac OS X -->
		<condition property="macosx">
			<and>
				<os family="unix"/>
				<os family="mac"/>
			</and>
		</condition>
		
		
		<condition property="runDoUnixStuff">
			<or>
				<and>
					<not>
						<isset property="release.platform" />
					</not>
					<isset property="unix" />
				</and>
				<and>
					<isset property="release.platform" />
					<equals arg1="unix" arg2="${release.platform}" />
				</and>
			</or>
		</condition>

		<condition property="runDoWindowsStuff">
			<or>
				<and>
					<not>
						<isset property="release.platform" />
					</not>
					<isset property="windows" />
				</and>
				<and>
					<isset property="release.platform" />
					<equals arg1="windows" arg2="${release.platform}" />
				</and>
			</or>
		</condition>
		
		<condition property="runDoMacOSXStuff">
			<or>
				<and>
					<not>
						<isset property="release.platform" />
					</not>
					<isset property="macosx" />
				</and>
				<and>
					<isset property="release.platform" />
					<equals arg1="macosx" arg2="${release.platform}" />
				</and>
			</or>
		</condition>
		
		<condition property="runDoAppletStuff">
			<or>
				<isset property="applet" />
				<and>
					<isset property="release.platform" />
					<equals arg1="applet" arg2="${release.platform}" />
				</and>
			</or>
		</condition>
		
		<!-- Call the tasks that do platform specific stuff -->
		<antcall target="doUnixStuff" />
		<antcall target="doWindowsStuff" />
		<antcall target="doMacOSXStuff" />
		<antcall target="doAppletStuff" />
		

		<!-- Copy Java resources -->
		<copy todir="${classes.dir}">
			<fileset dir="${source.dir}" excludes="**/*.java **/*.html" />
		</copy>

		
		<!-- Utility library: free.util.* and free.workarounds.* -->

		<jar jarfile="${libs.dir}/util.jar"
		     basedir="${classes.dir}"
		     includes="free/util/** free/workarounds/**"
		     compress="false"
		/>


		<!-- Chess library: free.chess.* -->
		<jar jarfile="${libs.dir}/chess.jar"
		     basedir="${classes.dir}"
		     includes="free/chess/**"
		     compress="false"
		/>


		<!-- Fix CRLF in manifest.txt (for windows) -->
		<fixcrlf srcdir="${user.dir}" includes="manifest.txt" />

		<!-- Jin classes -->
		<jar jarfile="${build.dir}/jin.jar"
		     basedir="${classes.dir}"
		     includes="free/jin/* free/jin/event/** free/jin/legal/** free/jin/plugin/** free/jin/resources/**"
		     compress="false"
		     manifest="manifest.txt"
		/>


		<!-- Free Internet Chess Server support -->
		<jar jarfile="${servers.dir}/freechess.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/freechess/** free/freechess/**"
			         excludes="free/jin/freechess/definition" />
			<fileset dir="${classes.dir}/free/jin/freechess"
			         includes="definition" />
		</jar>


		<!-- Internet Chess Club support -->
		<jar jarfile="${servers.dir}/chessclub.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/chessclub/** free/chessclub/**" 
			         excludes="free/jin/chessclub/definition" />
			<fileset dir="${classes.dir}/free/jin/chessclub"
			         includes="definition" />
		</jar>


		<!-- Console plugin library -->
		<jar jarfile="${libs.dir}/console.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/console/**"
			         excludes="free/jin/console/icc/** free/jin/console/fics/**" />
		</jar>


		<!-- Console plugin for ICC -->
		<jar jarfile="${plugins.dir}/icc/console.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/console/icc/**"
			         excludes="free/jin/console/icc/definition" />
			<fileset dir="${classes.dir}/free/jin/console/icc"
			         includes="definition" />
		</jar>


		<!-- Console plugin for FICS -->
		<jar jarfile="${plugins.dir}/fics/console.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/console/fics/**"
			         excludes="free/jin/console/fics/definition" />
			<fileset dir="${classes.dir}/free/jin/console/fics"
			         includes="definition" />
		</jar>


		<!-- Sound plugin library -->
		<jar jarfile="${libs.dir}/sound.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/sound/**"
			         excludes="free/jin/sound/icc/** free/jin/sound/fics/**" />
		</jar>

		
		<!-- Sound plugin for ICC -->
		<jar jarfile="${plugins.dir}/icc/sound.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/sound/icc/**"
			         excludes="free/jin/sound/icc/definition" />
			<fileset dir="${classes.dir}/free/jin/sound/icc"
			         includes="definition" />
		</jar>


		<!-- Sound plugin for FICS -->
		<jar jarfile="${plugins.dir}/fics/sound.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/sound/fics/**"
			         excludes="free/jin/sound/fics/definition" />
			<fileset dir="${classes.dir}/free/jin/sound/fics"
			         includes="definition" />
		</jar>


		<!-- Seek Graph plugin library -->
		<jar jarfile="${libs.dir}/seek.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/seek/**"
			         excludes="free/jin/seek/icc/** free/jin/seek/fics/**" />
		</jar>


		<!-- Seek Graph plugin for ICC -->
		<jar jarfile="${plugins.dir}/icc/seek.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/seek/icc/**"
			         excludes="free/jin/seek/icc/definition" />
			<fileset dir="${classes.dir}/free/jin/seek/icc"
			         includes="definition" />
		</jar>


		<!-- Seek Graph plugin for FICS -->
		<jar jarfile="${plugins.dir}/fics/seek.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/seek/fics/**"
			         excludes="free/jin/seek/fics/definition" />
			<fileset dir="${classes.dir}/free/jin/seek/fics"
			         includes="definition" />
		</jar>


		<!-- Board plugin library -->
		<jar jarfile="${libs.dir}/board.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/board/**"
			         excludes="free/jin/board/icc/** free/jin/board/fics/**" />
		</jar>


		<!-- Board plugin for ICC -->
		<jar jarfile="${plugins.dir}/icc/board.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/board/icc/**"
			         excludes="free/jin/board/icc/definition" />
			<fileset dir="${classes.dir}/free/jin/board/icc"
			         includes="definition" />
		</jar>


		<!-- Board plugin for FICS -->
		<jar jarfile="${plugins.dir}/fics/board.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/board/fics/**"
			         excludes="free/jin/board/fics/definition" />
			<fileset dir="${classes.dir}/free/jin/board/fics"
			         includes="definition" />
		</jar>


		<!-- Game Logger plugin -->
		<jar jarfile="${plugins.dir}/gamelogger.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/gamelogger/**"
			         excludes="free/jin/gamelogger/definition" />
			<fileset dir="${classes.dir}/free/jin/gamelogger"
			         includes="definition" />
		</jar>


		<!-- Scripter plugin library -->
		<jar jarfile="${libs.dir}/scripter.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/scripter/**"
			         excludes="free/jin/scripter/icc/** free/jin/scripter/fics/**" />
		</jar>

		<!-- Scripter plugin for ICC -->
		<jar jarfile="${plugins.dir}/icc/scripter.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/scripter/icc/**"
			         excludes="free/jin/scripter/icc/definition" />
			<fileset dir="${classes.dir}/free/jin/scripter/icc"
			         includes="definition" />
		</jar>

		<!-- Scripter plugin for FICS -->
		<jar jarfile="${plugins.dir}/fics/scripter.jar" compress="false">
			<fileset dir="${classes.dir}"
			         includes="free/jin/scripter/fics/**"
			         excludes="free/jin/scripter/fics/definition" />
			<fileset dir="${classes.dir}/free/jin/scripter/fics"
			         includes="definition" />
		</jar>
		

		<!-- Extensions -->
		<mkdir dir="${resources.dir}" />

		
		<!-- Piece sets -->
		<mkdir dir="${resources.dir}/pieces" />
		
		<!-- Blitzin Vector -->
		<jar jarfile="${resources.dir}/pieces/blitzin.jar" compress="false">
			<fileset dir="${classes.dir}/pieces/blitzin" includes="**" />
			<fileset dir="${res.dir}/pieces/blitzin"
			         excludes="**.java" />
		</jar>
		
		<!-- Eboard Vector - this one is special because it's the default set --> 
		<jar jarfile="${resources.dir}/pieces/eboard.jar" compress="false">
			<fileset dir="${res.dir}/pieces/eboard"
			         excludes="**.java" />
		</jar>

		
		<!-- Xboard -->
		<antcall target="buildImagePieceSet">
			<param name="piece-set-id" value="xboard" />
		</antcall>

		<!-- Bookup -->
		<antcall target="buildImagePieceSet">
			<param name="piece-set-id" value="bookup" />
		</antcall>

		<!-- Dyche Gray -->
		<antcall target="buildImagePieceSet">
			<param name="piece-set-id" value="dyche1" />
		</antcall>

		<!-- Dyche Color -->
		<antcall target="buildImagePieceSet">
			<param name="piece-set-id" value="dyche2" />
		</antcall>
		
		<!-- Dyche Standard -->
		<antcall target="buildImagePieceSet">
			<param name="piece-set-id" value="dyche3" />
		</antcall>
		
		
		<!-- Board patterns -->
		<mkdir dir="${resources.dir}/boards" />

		<!-- Plain Color -->		
		<jar jarfile="${resources.dir}/boards/plain.jar" compress="false">
			<fileset dir="${res.dir}/boards/plain" />
		</jar>
		
		<!-- Dark Wood -->
		<antcall target="buildBoardPattern">
			<param name="board-pattern-id" value="wooden-dark" />
		</antcall>
		
		<!-- Light Wood -->
		<antcall target="buildBoardPattern">
			<param name="board-pattern-id" value="wooden-light" />
		</antcall>
		
		<!-- Slate -->
		<antcall target="buildBoardPattern">
			<param name="board-pattern-id" value="slate" />
		</antcall>
		
		<!-- Cold Marble -->
		<antcall target="buildBoardPattern">
			<param name="board-pattern-id" value="cold-marble" />
		</antcall>
		
		<!-- Gray Tiles -->
		<antcall target="buildBoardPattern">
			<param name="board-pattern-id" value="gray-tiles" />
		</antcall>

		<!-- Green Marble -->
		<antcall target="buildBoardPattern">
			<param name="board-pattern-id" value="green-marble" />
		</antcall>

		<!-- Pale Wood -->
		<antcall target="buildBoardPattern">
			<param name="board-pattern-id" value="pale-wood" />
		</antcall>
		
		<!-- Winter -->
		<antcall target="buildBoardPattern">
			<param name="board-pattern-id" value="winter" />
		</antcall>
		
		<!-- Red Marble -->
		<antcall target="buildBoardPattern">
			<param name="board-pattern-id" value="red-marble" />
		</antcall>
		
	</target>
	
	<!-- Builds a single piece set -->
	<target name="buildImagePieceSet">
		<jar jarfile="${resources.dir}/pieces/${piece-set-id}.jar" compress="false">
			<fileset dir="${classes.dir}/pieces" includes="ImagePieceSetLoader*.class" />
			<fileset dir="${res.dir}/pieces/${piece-set-id}" />
		</jar>
	</target>
	
	
	<!-- Builds a single board pattern -->
	<target name="buildBoardPattern">
		<jar jarfile="${resources.dir}/boards/${board-pattern-id}.jar" compress="false">
			<fileset dir="${classes.dir}/boards" includes="ImageBoardLoader*.class" />
			<fileset dir="${res.dir}/boards/${board-pattern-id}" />
		</jar>
	</target>
	
	
	<!-- If the property runDoUnixStuff is set, does things required for Unix -->
	<target name="doUnixStuff" if="runDoUnixStuff">
		<copy todir="${build.dir}">
			<fileset dir="resources/os-specific/unix" includes="jin" />
		</copy>
		<chmod file="${build.dir}/jin" perm="a+x" />
	
		<!-- Check whether x86 -->
		<condition property="x86">
			<or>
				<equals arg1="x86" arg2="${os.arch}" />
				<equals arg1="i386" arg2="${os.arch}" />
				<equals arg1="i486" arg2="${os.arch}" />
				<equals arg1="i586" arg2="${os.arch}" />
				<equals arg1="i686" arg2="${os.arch}" />
			</or>
		</condition>
		<antcall target="doUnixOnx86Stuff" /> 
		
	</target>

	<!-- If the property x86 is set, does things required for unix on x86 -->
	<target name="doUnixOnx86Stuff" if="x86">		
		<copy todir="${build.dir}">
			<fileset dir="resources/os-specific/unix/x86" />
		</copy>
		<chmod file="${build.dir}/sox" perm="a+x" />
		<chmod file="${build.dir}/play" perm="a+x" />
	</target>


	<!-- If the property runDoWindowsStuff is set, does things required for Windows -->
	<target name="doWindowsStuff" if="runDoWindowsStuff">		
		<copy todir="${build.dir}">
			<fileset dir="resources/os-specific/windows" />
		</copy>
	</target>
	
	
	<!-- If the property doMacOSXStuff is set, does things required for Mac OS X -->
	<target name="doMacOSXStuff" if="runDoMacOSXStuff">
		<javac srcdir="resources/os-specific/macosx"
		       destdir="${classes.dir}"
		       includes="free/jin/MacOSXSpecific.java"
		       debug="${debug}">
		       
			<classpath>
				<pathelement location="resources/os-specific/macosx/ui.jar"/>
				<pathelement path="${classes.dir}"/>
			</classpath>
		</javac>
	</target>
	

	<!-- If the property doAppletStuff is set, does things required for Applets -->
	<target name="doAppletStuff" if="runDoAppletStuff">
		<javac srcdir="resources/os-specific/applet"
		       includes="DetectJava.java"
		       debug="${debug}">
		</javac>
		<copy todir="${build.dir}">
			<fileset file="resources/os-specific/applet/**" excludes="**.java"/>
		</copy>
	</target>
	
	
</project>
