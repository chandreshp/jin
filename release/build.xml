<!--

  This file is not meant to be used by anyone who isn't the official source of
  Jin releases. It depends on a specific environment and will not work without
  it. If you have a strong urge to build Jin releases, I suggest a cold shower.
  If nevertheless you decide to ignore this wise advice (and have tried
  the shower solution), here is a partial list of things you need to know:
  
  * It requires Apache Ant 1.7 or later.
  * It requires some tasks from the ant-contrib project which you can get from
    http://sourceforge.net/projects/ant-contrib/.
  * To build a Windows installer, this buildfile uses the NSIS installer compiler from
    http://nsis.sourceforge.net/.
  * Mac OS X releases can only be built on Mac OS X.
  * Building a JET release requires Excelsior JET 4.1.
    Note that JET does not support cross compiling, so this buildfile creates
    a Linux release when run on Linux and a Windows release when run on Windows.

-->

<project name="Jin Release" default="release">
	
	
	<property name="app.id" value="jin" /> <!-- The id of the application -->
	<property name="app.name" value="Jin" /> <!-- The name of the application -->
	<dirname property="app.dir" file="." /> <!-- The directory of the buildfile to run to build the app -->
	<property name="releasefiles.dir" value="${app.dir}/build" /> <!-- The directory of the files to release -->
	<property name="result.dir" value="." /> <!-- The directory where to put the result -->
	<property name="target.protocols" value="icc fics" /> <!-- The list of protocols to target -->
	<property name="target.servers" value="icc fics wcl" /> <!-- The list of servers to target -->
	<property name="osx.icon" value="osx/icon.icns" />
	
	<resources id="extra.files"> <!-- Added to the release -->
		<filelist dir="." files="changelog.txt" />
		<filelist dir="${app.dir}/src/free/jin/legal" files="gpl.txt" />
	</resources>
	<filelist id="extra.files.unix" dir="unix" files="README icon.png jin" /> <!-- Added to a unix release -->
	<filelist id="extra.files.win" dir="win" files="jin.exe jin.cfg" /> <!-- Added to a windows release -->
	<filelist id="extra.files.osx" dir="osx" files="" /> <!-- Added to an OS X release -->
	
	<property name="source.dir" value="${app.dir}/src" /> <!-- The directory of the source -->


	<!-- Makes releases for windows, unix, os x and plain source code -->
	<target name="release" depends="osx, unix, windows, src" description="Build all normal releases"/>
	
	
	<target name="init">
		<taskdef resource="net/sf/antcontrib/antlib.xml" />

		<!-- Ask for Jin version -->
		<input message="Please specify the release version:" addproperty="app.version" />
		
		<property name="release.dir" value="${result.dir}/${app.id}-${app.version}" />
    
		<mkdir dir="${release.dir}" />
	</target>


	<!-- Rebuilds for a specific platform -->
	<target name="rebuild">
		<echo message="Rebuilding ${app.name} for ${target.platform}" />
		<ant target="clean" dir="${app.dir}" inheritall="false" />
		<ant target="build" dir="${app.dir}" inheritall="false">
			<property name="app.id" value="${app.id}" />
			<property name="app.name" value="${app.name}" />
			<property name="app.version" value="${app.version}" />
			<property name="target.platform" value="${target.platform}" />
		</ant>
	</target>
	
	
	<!-- Helper target for copying the necessary application files.
	     Takes 3 parameters:
	     dir - the application files' directory
	     todir - the directory where to copy the files
	     exclude - a list of space separated exclusion patterns
	-->
	<target name="copy-app-files">
		<copy todir="${todir}" includeemptydirs="false">
			<fileset dir="${dir}" includes="*" excludes="${exclude}" />
			<fileset dir="${dir}" includes="libs/*" excludes="${exclude}" />
			<fileset dir="${dir}" includes="lnfs/*" excludes="${exclude}" />
			<fileset dir="${dir}" includes="actions/*" excludes="${exclude}" />
			<fileset dir="${dir}" includes="plugins/*" excludes="${exclude}" />
			<fileset dir="${dir}" includes="resources/*/*" excludes="${exclude}" />
		</copy>
		
		<foreach list="${target.protocols}"
		         target="copy-protocol-files"
		         param="protocol.id"
		         delimiter=" "
		         inheritall="yes"
		/>
		<foreach list="${target.servers}"
		         target="copy-server-files"
		         param="server.id"
		         delimiter=" "
		         inheritall="yes"
		/>
	</target>
	
	
	
	<!-- Helper target for the copy-app-files target, which copies the
	     protocol-specific files. The id of the protocol is passed via ${protocol.id} -->
	<target name="copy-protocol-files">
		<copy todir="${todir}">
			<fileset dir="${dir}" includes="libs/${protocol.id}/**" />
			<fileset dir="${dir}" includes="actions/${protocol.id}/**" />
			<fileset dir="${dir}" includes="plugins/${protocol.id}/**" />
			<fileset dir="${dir}" includes="servers/${protocol.id}/protocol.jar" />
		</copy>
	</target>
	
	
	<!-- Helper target for the copy-app-files target, which copies the
	     server-specific files. The id of the server is passed via ${server.id} -->
	<target name="copy-server-files">
		<copy todir="${todir}">
			<fileset dir="${dir}" includes="servers/*/${server.id}.jar" />
			<fileset dir="${dir}" includes="resources/*/${server.id}/**" />
		</copy>
	</target>
	
	

	<!-- Unix release. Resulting file is ${unix-archive} -->
	<target name="unix" depends="init" description="Builds a release for Unix/Linux">
		<echo message="Creating unix/linux release" />
		
		<property name="release.unix.dir" value="${release.dir}/unix" />
    
		<delete dir="${release.unix.dir}" />
    
		<mkdir dir="${release.dir}" />
		<mkdir dir="${release.unix.dir}" />
		
		<antcall target="rebuild">
			<param name="target.platform" value="unix" />
		</antcall>
		
		<property name="unix-dir-to-tar" value="${release.unix.dir}/tmp" />
		<property name="unix-files-dir" value="${unix-dir-to-tar}/${app.id}-${app.version}" />
		<mkdir dir="${unix-dir-to-tar}" />
		<mkdir dir="${unix-files-dir}" />
		
		<antcall target="copy-app-files">
			<param name="dir" value="${releasefiles.dir}" />
			<param name="todir" value="${unix-files-dir}" />
			<param name="exclude" value="" />
		</antcall>
		<copy todir="${unix-files-dir}">
			<resources refid="extra.files" />
			<resources refid="extra.files.unix" />
		</copy>
		
		<property name="unix-tar" value="${release.unix.dir}/${app.id}-${app.version}-unix.tar" />
		<property name="unix-gz" value="${unix-tar}.gz" />
		
		<tar destfile="${unix-tar}">
			<tarfileset dir="${unix-dir-to-tar}" excludes="*/${app.id}" />
			<tarfileset dir="${unix-dir-to-tar}" includes="*/${app.id}" mode="755" />
		</tar>
		
		<gzip src="${unix-tar}" zipfile="${unix-gz}" />
		
		<delete dir="${unix-dir-to-tar}" />
		<delete file="${unix-tar}" />
		
		<property name="unix-archive" value="${unix-gz}" />
	</target>
	

	
	<!-- 
	     Windows release. Resulting files are ${win-install} and ${win-archive}.
	-->
	<target name="windows" depends="init" description="Builds a release for Windows">
		<echo message="Creating windows release" />

		<input message="Specify the NSIS executable" addproperty="win.setup.maker" />
		<property name="release.win.dir" value="${release.dir}/win" />
    
		<delete dir="${release.win.dir}" />
		<mkdir dir="${release.win.dir}" />
    
		<antcall target="rebuild">
			<param name="target.platform" value="windows" />
		</antcall>

		<property name="dir-to-inst" value="${release.win.dir}/files" />
		<property name="win-install" value="${release.win.dir}/${app.id}-${app.version}-windows.exe" />
		<property name="win-archive" value="${release.win.dir}/${app.id}-${app.version}-windows.zip" />

		<mkdir dir="${dir-to-inst}" />
		
		<antcall target="copy-app-files">
			<param name="dir" value="${releasefiles.dir}" />
			<param name="todir" value="${dir-to-inst}" />
			<param name="exclude" value="" />
		</antcall>
		<copy todir="${dir-to-inst}">
			<resources refid="extra.files" />
			<resources refid="extra.files.win" />
		</copy>
		
		<antcall target="win-create-install">
			<param name="target-dir" value="${dir-to-inst}" />
			<param name="exe" value="${win-install}" />
			<param name="zip" value="${win-archive}" />
		</antcall>
		
		<delete dir="${dir-to-inst}" />

	</target>
	
	<!-- 
	    Helper target for the windows target. Builds a single windows release
	    (an installer and an archive). Parameters are:
	    target-dir: The directory to install.
	    exe: The name of the install executable
	    zip: The name of tha archive
	-->
	<target name="win-create-install">
		<!-- Get the command prefix for NSIS -->
		<condition property="nsis-prefix" value="/" else="-">
			<os family="windows"/>
		</condition>
		<exec dir="." executable="${win.setup.maker}" failonerror="yes">
			<arg value="${nsis-prefix}NOCD" /> <!-- Don't change into the .nsi file's directory -->
			<arg value="${nsis-prefix}V2" /> <!-- Low verbosity --> 
			<arg value="${nsis-prefix}Ddir=${target-dir}${file.separator}" /> <!-- The directory whose contents to install -->
			<arg value="${nsis-prefix}Dfile=${exe}" /> <!-- The installer file -->
			<arg value="${nsis-prefix}Dname=${app.name}" /> <!-- The application name -->
			<arg value="${nsis-prefix}Dver=${app.version}" /> <!-- The application version -->
			<arg value="win${file.separator}installer.nsi" />
		</exec>
		<zip destfile="${zip}" basedir="${dir-to-inst}" />
	</target>
	
	
	
	<!-- OS X release. Resulting file is ${osx-install} -->
	<target name="osx" depends="init" description="Builds a release for Mac OS X">
		<echo message="Creating Mac OS X release" />

		<property name="release.osx.dir" value="${release.dir}/osx" />
		<delete dir="${release.osx.dir}" />
		<mkdir dir="${release.osx.dir}" />
		
		<antcall target="rebuild">
			<param name="target.platform" value="macosx" />
		</antcall>
		<property name="app-dir.name" value="${app.name}.app" />
		<property name="app-dir" value="${release.osx.dir}/${app-dir.name}" />
		<mkdir dir="${app-dir}/Contents/Resources/Java" />
		
		<copy todir="${app-dir}/Contents">
			<fileset dir="osx" includes="Info.plist PkgInfo" />
			<filterset>
		    	<filter token="APPID" value="${app.id}" />
		    	<filter token="APPNAME" value="${app.name}" />
				<filter token="APPVER" value="${app.version}" />
			</filterset>
		</copy>
		
		<copy todir="${app-dir}/Contents/Resources" file="${osx.icon}" />
		
		<antcall target="copy-app-files">
			<param name="dir" value="${releasefiles.dir}" />
			<param name="todir" value="${app-dir}/Contents/Resources/Java" />
			<param name="exclude" value="lnfs/**" />
		</antcall>

		<mkdir dir="${app-dir}/Contents/MacOS" />
		<copy todir="${app-dir}/Contents/MacOS" file="osx/JavaApplicationStub" />
		<chmod file="${app-dir}/Contents/MacOS/JavaApplicationStub" perm="a+x" />
		
		<copy todir="${app-dir}">
			<resources refid="extra.files" />
			<resources refid="extra.files.osx" />
		</copy>
		
		<property name="osx-install" value="${release.osx.dir}/${app.id}-${app.version}-macosx.dmg" />
		<antcall target="osx-package">
			<param name="targetfile" value="${osx-install}" />
		</antcall>
		
		<delete dir="${app-dir}" />
	</target>
	
	
	<!-- 
		Helper target for the osx target. Builds a .dmg.gz file from the .app directory 
		This is unlikely to work except for under Mac OS X
	-->
	<target name="osx-package">
		<property name="mkdmg" value="${basedir}/osx/mkdmg" />
		<chmod file="${mkdmg}" perm="u+x" />
		<exec executable="${mkdmg}" failonerror="yes">
			<arg line="${app-dir} ${app.name}-${app.version} ${targetfile}" />
		</exec>
	</target>
	
	
	<!-- Initializes applet related stuff -->
	<target name="applet_init" depends="init">
		<property name="release.applet.dir" value="${release.dir}/applet" />
    
		<delete dir="${release.applet.dir}" />
    
		<mkdir dir="${release.dir}" />
		<mkdir dir="${release.applet.dir}" />
	</target>
	
	
	<!-- Creates an applet release with the specified arguments
	    protocol.id: The id of the protocol ("icc", "fics" etc.)
		server.id: The id of the server ("icc", "fics", "wcl" etc.)
		server.classname: The name of the server class ("free.jin.chessclub.ChessclubServer" etc.)
		libs: The required libraries.
		plugins: The required plugin jar files
		plugin.classnames: The names of the plugin classes
		actions: The required action jar files
		action.classnames: The names of the action classes
		pieces: The required piece set IDs
		boards: The required board pattern IDs
	 -->
	<target name="applet" depends="init, applet_init">
		<echo message="Creating applet release for ${server.id}" />

		<antcall target="rebuild">
			<param name="target.platform" value="applet" />
			<param name="build.compress" value="yes" />
			<param name="manifest.classpath.lf" value="" />
		</antcall>
  
		<property name="dir-to-tar" value="${release.applet.dir}/${app.id}-applet-${app.version}-${server.id}" />
		<mkdir dir="${dir-to-tar}" />
		
		<javac srcdir="applet"
		       destdir="${dir-to-tar}"
		       includes="DetectJava.java">
			<compilerarg compiler="modern" line="-target 1.1" />
			<compilerarg compiler="modern" line="-source 1.2" />
		</javac>
		
		<copy todir="${dir-to-tar}">
			<fileset dir="${releasefiles.dir}" 
				includes="*.jar servers/${protocol.id}/protocol.jar servers/${protocol.id}/${server.id}.jar" />
		</copy>
		
		<mkdir dir="${dir-to-tar}/libs" />
		<copy todir="${dir-to-tar}/libs">
			<fileset dir="${releasefiles.dir}/libs" includes="${libs}" />
		</copy>
		
		<mkdir dir="${dir-to-tar}/plugins" />
		<copy todir="${dir-to-tar}/plugins">
			<fileset dir="${releasefiles.dir}/plugins" includes="${plugins}" />
		</copy>
		
		<mkdir dir="${dir-to-tar}/actions" />
		<copy todir="${dir-to-tar}/actions">
			<fileset dir="${releasefiles.dir}/actions" includes="${actions}" />
		</copy>
		
		<copy todir="${dir-to-tar}">
			<fileset dir="${releasefiles.dir}" includes="custom.properties" />
		</copy>
		
		<pathconvert property="dir-to-tar.absolute">
			<path>
				<pathelement location="${dir-to-tar}"/>
			</path>
		</pathconvert>
		<pathconvert dirsep="/" pathsep="," property="applet.classpath">
			<fileset dir="${dir-to-tar}" includes="**/*.jar" />
			<globmapper from="${dir-to-tar.absolute}/*" to="*" />
		</pathconvert>
		<copy todir="${dir-to-tar}">
			<fileset file="applet/*" excludes="*.java"/>
			<filterset>
				<filter token="CLASSPATH" value="${applet.classpath}" />
				<filter token="SERVER.CLASSNAME" value="${server.classname}" />
				<filter token="PLUGIN.CLASSNAMES" value="${plugin.classnames}" />
				<filter token="ACTION.CLASSNAMES" value="${action.classnames}" />
				<filter token="APP.ID" value="${app.id}" />
				<filter token="SERVER.ID" value="${server.id}" />
			</filterset>
		</copy>
		
		<antcall target="build-applet-resource-type" inheritall="yes">
			<param name="resource.type" value="boards" />
			<param name="resource.names" value="${boards}" />
		</antcall>
    
		<antcall target="build-applet-resource-type" inheritall="yes">
			<param name="resource.type" value="pieces" />
			<param name="resource.names" value="${pieces}" />
		</antcall>
    	
		<dirname property="dir-to-tar-parent" file="${dir-to-tar}" />
		<basename property="dir-to-tar-basename" file="${dir-to-tar}" />
		<property name="tar" value="${release.applet.dir}/${app.id}-applet-${app.version}-${server.id}.tar" />
		<property name="gz" value="${tar}.gz" />
		<tar destfile="${tar}">
			<tarfileset dir="${dir-to-tar-parent}" includes="${dir-to-tar-basename}/**" />
		</tar>
    
		<gzip src="${tar}" zipfile="${gz}" />
		<delete dir="${dir-to-tar}" />
		<delete file="${tar}" />
		<property name="applet-${server.id}-archive" value="${gz}" />
	</target>
	
	
	<!-- Applet release for ICC. Resulting file is ${applet-icc-archive} -->
	<target name="applet.icc" depends="init" description="Builds an applet release for ICC">
		<antcall target="applet">
			<param name="protocol.id" value="icc" />
			<param name="server.id" value="icc" />
			<param name="server.classname" value="free.jin.chessclub.servers.icc.ICCServer" />
			<param name="libs" value="icc/timestamping.jar seek.jar board.jar sound.jar console.jar" />
			<param name="plugins" value="actions.jar icc/seek.jar icc/board.jar icc/sound.jar icc/console.jar" />
			<param name="plugin.classnames" value="free.jin.console.icc.ChessclubConsoleManager free.jin.board.icc.ChessclubBoardManager free.jin.seek.icc.ChessclubSoughtGraphPlugin free.jin.sound.icc.ChessclubSoundManager free.jin.actions.ActionsPlugin" />
			<param name="actions" value="" />
			<param name="action.classnames" value="" />
			<param name="pieces" value="adventure alfonso-x alpha berlin condal harlequin kingdom leipzig line lucena magnetic mark marroquin maya medieval merida motif smart usual utrecht xboard icc/blitzin icc/bookup icc/dyche1 icc/dyche2 icc/dyche3" />
			<param name="boards" value="cold-marble gray-tiles green-marble pale-wood plain red-marble slate winter wooden-dark icc/wooden-light" />
		</antcall>
	</target>
	
	<!-- Applet release for FICS. Resulting file is ${applet-fics-archive} -->
	<target name="applet.fics" depends="init" description="Builds an applet release for FICS">
		<antcall target="create-applet-archive">
			<param name="protocol.id" value="fics" />
			<param name="server.id" value="fics" />
			<param name="server.classname" value="free.jin.freechess.servers.fics.FICSServer" />
			<param name="libs" value="fics/timesealing.jar seek.jar board.jar sound.jar console.jar" />
			<param name="plugins" value="actions.jar fics/seek.jar fics/board.jar fics/sound.jar fics/console.jar" />
			<param name="plugin.classnames" value="free.jin.console.fics.FreechessConsoleManager free.jin.board.fics.FreechessBoardManager free.jin.seek.fics.FreechessSoughtGraphPlugin free.jin.sound.fics.FreechessSoundManager free.jin.actions.ActionsPlugin" />
			<param name="actions" value="" />
			<param name="action.classnames" value="" />
			<param name="pieces" value="adventure alfonso-x alpha berlin condal harlequin kingdom leipzig line lucena magnetic mark marroquin maya medieval merida motif smart usual utrecht xboard fics/eboard" />
			<param name="boards" value="cold-marble gray-tiles green-marble pale-wood plain red-marble slate winter wooden-dark" />
		</antcall>
	</target>
  
  
  
	<!-- A helper target for building a single resource type for the applet -->
	<target name="build-applet-resource-type">
		<foreach list="${resource.names}"
		         target="copy-applet-resources"
		         param="resource.path"
		         delimiter=" "
		         inheritall="yes"
		/>
		<zip destfile="${dir-to-tar}/resources/${resource.type}/definitions.zip"
		     basedir="${dir-to-tar}/resources/${resource.type}"
		     includes="*/definition"
		/>
	</target>
	
	<!-- A helper target for copying a specified list of resources for the applet -->
	<target name="copy-applet-resources">
		<basename file="${resource.path}" property="resource.name"/>
		<mkdir dir="${dir-to-tar}/resources/${resource.type}/${resource.name}" />
		<unzip src="${releasefiles.dir}/resources/${resource.type}/${resource.path}.zip"
    	           dest="${dir-to-tar}/resources/${resource.type}/${resource.name}" />
	</target>
	
	
	
	<!-- Source. Resulting files are ${src-archive} and ${src-archive-no-extras} -->
	<target name="src" depends="init" description="Builds a source release">
		<echo message="Creating Source release" />

		<property name="release.src.dir" value="${release.dir}/src" />
    
		<delete dir="${release.src.dir}" />
		<mkdir dir="${release.src.dir}" />
		
		<property name="src-archive-dir" value="${release.src.dir}/tmp" />
		<property name="src-archive-files" value="${src-archive-dir}/jin-${app.version}" />
		<mkdir dir="${src-archive-dir}" />
		<mkdir dir="${src-archive-files}" />		
		<copy todir="${src-archive-files}">
			<fileset dir="${app.dir}"
			         includes="src/** resources/** build.xml manifest.txt"
			         excludes="src/**/maya/**"
			/>
			<fileset dir="." includes="changelog.txt copyright.txt gpl.txt" />
			<fileset dir="src" includes="COMPILING" />
		</copy>
		
 		<propertyfile file="${src-archive-files}/src/free/jin/resources/app.props">
			<entry key="app.version" value="${app.version}" />
		</propertyfile>
		
		<property name="src-tar" value="${release.src.dir}/jin-${app.version}-source.tar" />
		<property name="src-archive" value="${src-tar}.gz" />
		<tar destfile="${src-tar}">
			<tarfileset dir="${src-archive-dir}" />
		</tar>
		<gzip src="${src-tar}" zipfile="${src-archive}" />
		<delete file="${src-tar}" />
		
		<delete dir="${src-archive-dir}" />
	</target>

	
	<!-- Builds a release compiled with Excelsior JET 4.5 -->
	<target name="jet" depends="init" description="Builds a release compiled with Excelsior JET">
		<taskdef resource="net/sf/antcontrib/antlib.xml" />
		
		<condition property="os" value="linux"><os name="linux" /></condition>
		<condition property="os" value="windows"><os family="windows" /></condition>
		<fail unless="os" message="Can only build JET releases on Linux or Windows" />
		
		<echo message="Creating JET ${os} release" />
		
		<input message="Please specify JET's directory:" addproperty="jet.home" />
		<property name="release.jet.dir" value="${release.dir}/jet" />
		<property name="jin.compilespec" value="jet/jin.prj" />
		<property name="jin.releasespec" value="jet/jin-${os}.jpn" />
		
		<delete dir="${release.jet.dir}" />
		<mkdir dir="${release.dir}" />
		<mkdir dir="${release.jet.dir}" />
		
		<antcall target="rebuild">
			<param name="target.platform" value="jet-${os}" />
		</antcall>
		
		<property name="tmpdir" value="${basedir}/jet/tmp" />
		<mkdir dir="${tmpdir}" />
		<copy todir="${tmpdir}">
			<fileset dir="${releasefiles.dir}" excludes="plugins/*/*.jar lnfs/**" />
		</copy>
		<property name="efsep" value="\${file.separator}" /> <!-- Escaped File Separator-->
		<copy todir="${tmpdir}">
			<fileset dir="${releasefiles.dir}" includes="plugins/*/*.jar" />
			<mapper type="regexp" from="plugins${efsep}(.*)${efsep}(.*)\.jar" to="plugins${efsep}\1${efsep}\1_\2.jar" />
		</copy>
		
		<exec executable="${jet.home}/bin/jc" dir="${tmpdir}" failonerror="yes">
			<arg line="=p ${basedir}/${jin.compilespec}" />
			<env key="LD_LIBRARY_PATH" value="${jet.home}/lib/x86/shared" />
		</exec>
		
		<foreach target="package-definition" param="jar.name" inheritall="yes">
			<fileset dir="${tmpdir}" includes="**/*.jar" excludes="resources/** lnfs/**" />
		</foreach>

		<!--
		<property name="dir-to-inst" value="${release.jet.dir}/jin-${app.version}" />
		<mkdir dir="${dir-to-inst}" />
		
		<exec executable="${jet.home}/bin/xpack" dir="${tmpdir}" failonerror="yes">
			<arg line="${basedir}/${jin.releasespec} -target ${basedir}/${dir-to-inst}" />
			<env key="PATH" value="${jet.home}/bin" />
			<env key="LD_LIBRARY_PATH" value="${jet.home}/lib/x86/shared" />
		</exec>
		-->
		<!-- xpack rewrites the spec file, saving the old one as .bak -->
		<!--
		<move file="${jin.releasespec}.bak" tofile="${jin.releasespec}" preservelastmodified="true" />
		<delete dir="${tmpdir}" />
		
		<copy todir="${dir-to-inst}">
			<fileset dir="." includes="changelog.txt copyright.txt gpl.txt" />
		</copy>
		
		<antcall target="jet-package-${os}" />
		
		<delete dir="${dir-to-inst}" />
		-->
	</target>
	
	
	<!-- Helper target for "jet" target. Removes all but the definition file from the specified jar file.
	     If the jar file doesn't have a definition file, it is removed. -->
	<target name="package-definition">
		<dirname file="${jar.name}" property="dir.name" />
		<basename file="${jar.name}" property="file.name" />
		
		<unjar dest="${dir.name}">
			<fileset dir="${dir.name}" includes="${file.name}" />
		    <patternset includes="definition" />
		</unjar>
		
		<delete file="${jar.name}" />
		<zip destfile="${jar.name}" basedir="${dir.name}" includes="definition" whenempty="skip"/>
		<delete file="${dir.name}/definition" />
	</target>


	<!-- Helper target for "jet" target on Linux. Packages the installable directory into a tar.gz file. -->
	<target name="jet-package-linux">
		<property name="jet-linux-tar" value="${release.jet.dir}/jin-${app.version}-jet-linux.tar" />
		<tar destfile="${jet-linux-tar}">
			<tarfileset dir="${release.jet.dir}" excludes="*/jin" />
			<tarfileset dir="${release.jet.dir}" includes="*/jin" mode="755"/>
		</tar>
		<gzip src="${jet-linux-tar}" zipfile="${jet-linux-tar}.gz" />
		<delete file="${jet-linux-tar}" />
	</target>
	
	
	<!-- Helper target for "jet" target" on Windows. Creates an installer. -->
	<target name="jet-package-windows">
		<input message="Specify the NSIS executable" addproperty="win.setup.maker" />
		<property name="exe" value="${release.jet.dir}/jin-${app.version}-jet-windows.exe" />
		<exec dir="." executable="${win.setup.maker}" failonerror="yes">
			<arg value="/NOCD" /> <!-- Don't change into the .nsi file's directory -->
			<arg value="/V2" /> <!-- Low verbosity --> 
			<arg value="/Ddir=${dir-to-inst}${file.separator}" /> <!-- The directory whose contents to install -->
			<arg value="/Dfile=${exe}" /> <!-- The installer file -->
			<arg value="/Dname=${app.name}" /> <!-- The application name -->
			<arg value="/Dver=${app.version}" /> <!-- The Jin version -->
			<arg value="jet/installer.nsi" />
		</exec>
	</target>

</project>
