<!--

  This file is not meant to be used by anyone who isn't the official source of
  Jin releases. It depends on a specific environment and will not work without
  it. If you have a strong urge to build Jin releases, I suggest a cold shower.
  If nevertheless you decide to ignore this wise advice (and have tried
  the shower solution), here is a partial list of things you need to know:

  1. Until the bug described at  
     http://www-124.ibm.com/developerworks/bugs/?func=detailbug&bug_id=3099&group_id=10
     is resolved, the only Java compiler that produces bytecode Microsoft VM
     doesn't implode on is Jikes-1.15. Debug information must not be included
     for this to work. No other compiler will work, trust me. Target flags don't
     help either. Good luck installing and running jikes-1.15. *Evil grin* 
  2. For windows releases, this buildfile uses the NSIS installer compiler from
     http://nsis.sourceforge.net/. This currently (version 2.0) does not build
     as-is under Linux, but the author promised to fix it sometime soon. In the
     meanwhile you can get the extra required files from
     http://sourceforge.net/tracker/download.php?group_id=22049&atid=373085&file_id=85769&aid=945832.
  3. The SourceForge OS X compile server is used to create the OS X install, so
     you will need to be a developer in some project if you want to use this
     file to make OS X releases.
  4. The scp and sshexec tasks are used for connecting to the SourceForge
     compile farm (for the OS X release), which in turn require the JSch library.
     See ant documentation for further details.
  5. Building an applet release requires some tasks from the ant-contrib project
     which you can get from http://sourceforge.net/projects/ant-contrib/.

-->

<project name="Jin Release" default="release">

	<target name="init">
		<dirname property="jin.dir" file="." />
		<property name="build.dir" value="${jin.dir}/build" />
		<property name="build.compiler" value="jikes" />
		<property name="build.debug" value="no" /> <!-- Doesn't work under MS VM with debug on -->		
		<property name="source.dir" value="${jin.dir}/src" />
		<property name="win.setup.maker" value="makensis.exe" />
		<property name="cf.host" value="cf-shell.sourceforge.net" />

		<!-- Ask for Jin version and update app.props -->
		<input message="Please specify the release version:" addproperty="release.version" />
		<echo message="Changing version in app.props to ${release.version}" /> 
		<propertyfile file="${source.dir}/free/jin/resources/app.props">
			<entry key="app.version" value="${release.version}" />
		</propertyfile>
		
		<property name="release.dir" value="jin-${release.version}" />
    
		<mkdir dir="${release.dir}" />
	</target>


	<!-- Builds for a specific platform -->
	<target name="build" depends="init">
		<ant target="clean" dir="${jin.dir}" />
		<echo message="Building Jin for ${release.platform}" />
		<ant target="build" dir="${jin.dir}">
			<property name="release.platform" value="${release.platform}" />
		</ant>
	</target>
	

	<!-- Unix release. Resulting file is ${unix-archive} -->
	<target name="unix" depends="init">
		<echo message="Creating unix/linux release" />
		
		<property name="release.unix.dir" value="${release.dir}/unix" />
    
		<delete dir="${release.unix.dir}" />
    
		<mkdir dir="${release.dir}" />
		<mkdir dir="${release.unix.dir}" />
		
		<antcall target="build">
			<param name="release.platform" value="unix" />
		</antcall>
		<property name="unix-dir-to-tar" value="${release.unix.dir}/jin-${release.version}" />
		<mkdir dir="${unix-dir-to-tar}" />
		<copy todir="${unix-dir-to-tar}">
			<fileset dir="${build.dir}" excludes="libs/swingall.jar lnfs/jgoodies-windows.jar" />
			<fileset dir="." includes="changelog.txt copyright.txt gpl.txt" />
			<fileset dir="unix" includes="README" />
		</copy>
		<property name="unix-tar" value="${release.unix.dir}/jin-${release.version}-unix.tar" />
		<property name="unix-gz" value="${unix-tar}.gz" />
		<tar destfile="${unix-tar}">
			<tarfileset dir="${release.unix.dir}" excludes="*/sox */play */jin" />
			<tarfileset dir="${release.unix.dir}" includes="*/sox */play */jin" mode="755" />
		</tar>
		<gzip src="${unix-tar}" zipfile="${unix-gz}" />
		<delete dir="${unix-dir-to-tar}" />
		<delete file="${unix-tar}" />
		<property name="unix-archive" value="${unix-gz}" />
	</target>
	

	
	<!-- Windows release. Resulting files are ${win-install} and ${win-archive} -->
	<target name="windows" depends="init">
		<echo message="Creating windows release" />
	
		<property name="release.win.dir" value="${release.dir}/win" />
    
		<delete dir="${release.win.dir}" />
		<mkdir dir="${release.win.dir}" />
    
		<antcall target="build">
			<param name="release.platform" value="windows" />
		</antcall>
		<property name="dir-to-inst" value="${release.win.dir}/files" />
		<mkdir dir="${dir-to-inst}" />
		<copy todir="${dir-to-inst}">
			<fileset dir="${build.dir}" />
			<fileset dir="." includes="changelog.txt copyright.txt gpl.txt" />
			<fileset dir="win" includes="readme.txt" />
		</copy>
		<property name="exe" value="${release.win.dir}/jin-${release.version}-win.exe" />
		<exec dir="." executable="${win.setup.maker}" failonerror="yes">
			<arg value="/NOCD" /> <!-- Don't change into the .nsi file's directory -->
			<arg value="/V2" /> <!-- Low verbosity --> 
			<arg value="/Ddir=${dir-to-inst}${file.separator}" /> <!-- The directory whose contents to install -->
			<arg value="/Dfile=${exe}" /> <!-- The installer file -->
			<arg value="/Dver=${release.version}" /> <!-- The Jin version -->
			<arg value="win/installer.nsi" />
		</exec>
		<property name="zip" value="${release.win.dir}/jin-${release.version}-win.zip" />
		<zip destfile="${zip}" basedir="${dir-to-inst}" />
		<delete dir="${dir-to-inst}" />
		<property name="win-install" value="${exe}" />
		<property name="win-archive" value="${zip}" />
	</target>
	

	<!-- OS X release. Resulting file is ${osx-install} -->
	<target name="osx" depends="init, ask-cf-info">
		<echo message="Creating Mac OS X release" />
		
		<property name="release.osx.dir" value="${release.dir}/osx" />
    
		<delete dir="${release.osx.dir}" />
		<mkdir dir="${release.osx.dir}" />
		
		<antcall target="build">
			<param name="release.platform" value="macosx" />
		</antcall>
		<property name="app-dir.name" value="Jin-${release.version}.app" />
		<property name="app-dir" value="${release.osx.dir}/${app-dir.name}" />
		<mkdir dir="${app-dir}/Contents/Resources/Java" />
		<copy todir="${release.osx.dir}">
			<fileset dir="osx" includes="mkdmg" />
			<filterset>
				<filter token="VERSION" value="${release.version}" />
				<filter token="APPDIRNAME" value="${app-dir.name}" />
			</filterset>
		</copy>
		<copy todir="${app-dir}">
			<fileset dir="." includes="changelog.txt copyright.txt gpl.txt" />
		</copy>
		<copy todir="${app-dir}/Contents">
			<fileset dir="osx" includes="Info.plist PkgInfo" />
			<filterset>
				<filter token="VERSION" value="${release.version}" />
			</filterset>
		</copy>
		<copy todir="${app-dir}/Contents/Resources" file="osx/icon.icns" />
		<copy todir="${app-dir}/Contents/Resources/Java">
			<fileset dir="${build.dir}" excludes="libs/swingall.jar lnfs/**" />
		</copy>
		<zip destfile="${release.osx.dir}/bundle.zip" basedir="${release.osx.dir}" />
		<scp keyfile="${user.home}/.ssh/id_dsa"
		     passphrase="${cf.passphrase}"
		     file="${release.osx.dir}/bundle.zip" 
		     todir="${cf.username}@cf-shell.sourceforge.net:~"				 
		/>
		<sshexec host="${cf.host}"
		         username="${cf.username}"
		         keyfile="${user.home}/.ssh/id_dsa"
		         passphrase="${cf.passphrase}"
		         command="ssh ppc-osx2 &quot;unzip -q bundle.zip &amp;&amp; mkdir ${app-dir.name}/Contents/MacOS &amp;&amp; cp /System/Library/Frameworks/JavaVM.framework/Versions/Current/Resources/MacOS/JavaApplicationStub ${app-dir.name}/Contents/MacOS/ &amp;&amp;	/Developer/Tools/SetFile -a B ${app-dir.name} &amp;&amp; chmod u+x mkdmg &amp;&amp; ./mkdmg&quot;"
		/>
		<scp keyfile="${user.home}/.ssh/id_dsa"
		     passphrase="${cf.passphrase}"
		     file="${cf.username}@cf-shell.sourceforge.net:~/jin-${release.version}-osx.dmg" 
		     todir="${release.osx.dir}"					
		/>
		<sshexec host="${cf.host}"
		         username="${cf.username}"
		         keyfile="${user.home}/.ssh/id_dsa"
		         passphrase="${cf.passphrase}"
		         command="rm -rf bundle.zip ${app-dir.name} mkdmg jin-${release.version}-osx.dmg"
		/> 
		<delete file="${release.osx.dir}/bundle.zip" />
		<delete file="${release.osx.dir}/mkdmg" />
		<delete dir="${app-dir}" />
		<delete dir="${app-dir}" />
		<property name="osx-install" value="jin-${release.version}-osx.dmg" />
	</target>
  

	<!-- Applet release. Resulting files are ${applet-icc-archive} and ${applet-fics-archive}  -->
	<target name="applet" depends="init">
		<echo message="Creating applet release" />
    
		<taskdef resource="net/sf/antcontrib/antlib.xml" />
    
		<property name="release.applet.dir" value="${release.dir}/applet" />
    
		<delete dir="${release.applet.dir}" />
    
		<mkdir dir="${release.dir}" />
		<mkdir dir="${release.applet.dir}" />

 		<propertyfile file="${source.dir}/free/jin/resources/app.props">
			<entry key="app.name" value="JinApplet" />
		</propertyfile>
		
		<antcall target="build">
			<param name="release.platform" value="applet" />
			<param name="build.compress" value="yes" />
			<param name="build.manifest" value="release/applet/manifest.txt" />
		</antcall>

 		<propertyfile file="${source.dir}/free/jin/resources/app.props">
			<entry key="app.name" value="Jin" />
		</propertyfile>
    
		<antcall target="create-applet-archive">
			<param name="server.name" value="icc" />
			<param name="server.file" value="chessclub.jar" />
			<param name="boards" value="cold-marble gray-tiles green-marble pale-wood plain red-marble slate winter wooden-dark icc/wooden-light" />
			<param name="pieces" value="icc/blitzin icc/bookup icc/dyche1 icc/dyche2 icc/dyche3 xboard" />
			<param name="auth_code" value="$authenticated = true;" />
		</antcall>

		<antcall target="create-applet-archive">
			<param name="server.name" value="fics" />
			<param name="server.file" value="freechess.jar" />
			<param name="boards" value="cold-marble gray-tiles green-marble pale-wood plain red-marble slate winter wooden-dark" />
			<param name="pieces" value="fics/eboard xboard" />
			<param name="auth_code" value="$authenticated = (file_get_contents(&#34;http://www.freechess.org/cgi-bin/pro/Login/jin/AuthenticateUser.cgi?username=$username&#38;password=$password&#34;) == &#34;1&#34;);" />
		</antcall>
	</target>
  
  
  
	<!-- Helper target for building an applet release. Builds a release for
	     the server specified by the server.name property -->
	<target name="create-applet-archive">
  
	<property name="dir-to-tar" value="${release.applet.dir}/jin-applet-${release.version}-${server.name}" />
		<mkdir dir="${dir-to-tar}" />
		<input message="Please specify ${server.name} database password:" addproperty="db_password" />
		<copy todir="${dir-to-tar}">
			<fileset dir="${build.dir}" 
			         includes="jin.jar ${server.name}.php ${server.name}_oldjava.php index.html DetectJava.class load_prefs.php reserve_space.php save_prefs.php libs/* libs/${server.name}/* plugins/* plugins/${server.name}/* actions/* actions/${server.name}/* servers/${server.file}"
					 excludes="${excluded_files}"
			/>
			<filterset>
				<filter token="old_java_url" value="${server.name}_oldjava.php" />
				<filter token="new_java_url" value="${server.name}.php" />
				<filter token="db_name" value="jin_${server.name}" />
				<filter token="db_pass" value="${db_password}" />
				<filter token="auth_code" value="${auth_code}" />
			</filterset>
		</copy>
    
		<foreach list="${boards}" target="copy-applet-resources" param="resource.name" delimiter=" " inheritall="yes">
			<param name="resource.type" value="boards" />
		</foreach>
    
		<foreach list="${pieces}" target="copy-applet-resources" param="resource.name" delimiter=" " inheritall="yes">
			<param name="resource.type" value="pieces" />
		</foreach>
    
		<property name="tar" value="${release.applet.dir}/jin-applet-${release.version}-${server.name}.tar" />
		<property name="gz" value="${tar}.gz" />
		<tar destfile="${tar}">
			<tarfileset dir="${dir-to-tar}"/>
		</tar>
    
		<gzip src="${tar}" zipfile="${gz}" />
		<delete dir="${dir-to-tar}" />
		<delete file="${tar}" />
		<property name="applet-${server.name}-archive" value="${gz}" />
	</target>
  
  
	<!-- A helper target for copying a specified list of resources -->
	<target name="copy-applet-resources">
    	<copy todir="${dir-to-tar}">
			<fileset dir="${build.dir}" includes="resources/${resource.type}/${resource.name}/**" /> 
		</copy>
	</target>
  

	<!-- Source. Resulting file is ${src-archive} -->
	<target name="src" depends="init">
		<echo message="Creating Source release" />

		<property name="release.src.dir" value="${release.dir}/src" />
    
		<delete dir="${release.src.dir}" />
		<mkdir dir="${release.src.dir}" />
		
		<property name="src-archive-dir.name" value="jin-${release.version}" />
		<property name="src-archive-dir" value="${release.src.dir}/${src-archive-dir.name}" />
		<mkdir dir="${src-archive-dir}" />
		<copy todir="${src-archive-dir}">
			<fileset dir="${jin.dir}" includes="src/** resources/** build.xml manifest.txt" />
			<fileset dir="." includes="changelog.txt copyright.txt gpl.txt" />
			<fileset dir="src" includes="COMPILING" />
		</copy>
		<property name="src-tar" value="${release.src.dir}/jin-${release.version}-src.tar" />
		<property name="src-gz" value="${src-tar}.gz" />
		<tar destfile="${src-tar}">
			<tarfileset dir="${release.src.dir}" includes="${src-archive-dir.name}/**" />
		</tar>
		<gzip src="${src-tar}" zipfile="${src-gz}" />
		<delete dir="${src-archive-dir}" />
		<delete file="${src-tar}" />
		<property name="src-archive" value="${src-gz}" />
	</target>

	
	<!-- Ask for SourceForge Compile Farm username and private key passphrase, then test them -->
	<target name="ask-cf-info" unless="cf.username">
		<input message="Please specify ${cf.host} username:" addproperty="cf.username" />
		<input message="Please specify the passphrase for your private key:" addproperty="cf.passphrase" />
		<echo message="Testing connection to Compile Farm, please wait" />
		<sshexec host="${cf.host}"
		         username="${cf.username}"
		         keyfile="${user.home}/.ssh/id_dsa"
		         passphrase="${cf.passphrase}"
		         command="echo works"
		/>
	</target>

	
	<!-- Makes releases for windows, unix and os x -->
	<target name="release" depends="init, ask-cf-info, unix, windows, osx, applet, src" />
	
</project>
